/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// The Cangjie API is in Beta. For details on its capabilities and limitations, please refer to the README file.

package ohos.rpc

import ohos.labels.APILevel
import ohos.ffi.{RemoteDataLite, releaseFFIData}
import ohos.business_exception.BusinessException

/**
 * Provides methods related to anonymous shared memory objects,
 * including creating, closing, mapping, and unmapping an Ashmem object,
 * reading data from and writing data to an Ashmem object,
 * obtaining the Ashmem size, and setting Ashmem protection.
 */
@!APILevel[
    22,
    syscap: "SystemCapability.Communication.IPC.Core"
]
public class Ashmem <: RemoteDataLite {
    init(id: Int64) {
        super(id)
    }

    ~init() {
        releaseFFIData(myDataId)
    }

    /**
     * The mapped memory is executable. Default value is 4.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public static const PROT_EXEC: UInt32 = 4

    /**
     * The mapped memory is inaccessible. Default value is 0.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public static const PROT_NONE: UInt32 = 0

    /**
     * The mapped memory is readable. Default value is 1.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public static const PROT_READ: UInt32 = 1

    /**
     * The mapped memory is writable. Default value is 2.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public static const PROT_WRITE: UInt32 = 2

    /**
     * Creates an Ashmem object with the specified name and size.
     *
     * @param { String } name - Name of the Ashmem object to create.
     * @param { Int32 } size - Size (in bytes) of the Ashmem object to create.
     * @returns { Ashmem } Return the Ashmem object if it is created successfully; return null otherwise.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public static func create(name: String, size: Int32): Ashmem {
        if (name.isEmpty()) {
            throw BusinessException(ErrorCode.CheckParamError.value, "Parameter error.")
        }
        try (cname = unsafe { LibC.mallocCString(name).asResource() }) {
            let id = unsafe { FfiRpcAshmemImplCreate(cname.value, size) }
            if (id < 0) {
                throw BusinessException(ErrorCode.CheckParamError.value, "Parameter error.")
            }
            return Ashmem(id)
        }
        throw BusinessException(0, "Unreachable branch.")
    }

    /**
     * Creates an Ashmem object by copying the file descriptor (FD) of an existing Ashmem object.
     * The two Ashmem objects point to the same shared memory region.
     *
     * @param { Ashmem } ashmem - Existing Ashmem object.
     * @returns { Ashmem } Ashmem object created.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public static func create(ashmem: Ashmem): Ashmem {
        var errCode: Int32 = 0
        let id = unsafe { FfiRpcAshmemImplCreateFromExisting(ashmem.getID(), inout errCode) }
        checkAndThrow(errCode)
        return Ashmem(id)
    }

    /**
     * Closes this Ashmem object.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public func closeAshmem(): Unit {
        unsafe { FfiRpcAshmemImplCloseAshmem(getID()) }
    }

    /**
     * Deletes the mappings for the specified address range of this Ashmem object.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public func unmapAshmem(): Unit {
        unsafe { FfiRpcAshmemImplUnmapAshmem(getID()) }
    }

    /**
     * Obtains the mapped memory size of this Ashmem object.
     *
     * @returns { Int32 } Memory size mapped.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public func getAshmemSize(): Int32 {
        var errCode: Int32 = 0
        let size = unsafe { FfiRpcAshmemImplGetAshmemSize(getID(), inout errCode) }
        checkAndThrow(errCode)
        return size
    }

    /**
     * Creates the shared file mapping on the virtual address space of this process.
     * The size of the mapping region is specified by this Ashmem object.
     *
     * @param { UInt32 } mapType - Protection level of the memory region to which the shared file is mapped.
     * @throws { BusinessException } 1900001 - Failed to call mmap.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public func mapTypedAshmem(mapType: UInt32): Unit {
        var errCode = 0i32
        unsafe { FfiRpcAshmemImplMapTypedAshmem(getID(), mapType, inout errCode) }
        checkAndThrow(errCode)
    }

    /**
     * Maps the shared file to the readable and writable virtual address space of the process.
     *
     * @throws { BusinessException } 1900001 - Failed to call mmap.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public func mapReadWriteAshmem(): Unit {
        var errCode = 0i32
        unsafe { FfiRpcAshmemImplMapReadWriteAshmem(getID(), inout errCode) }
        checkAndThrow(errCode)
    }

    /**
     * Maps the shared file to the read-only virtual address space of the process.
     *
     * @throws { BusinessException } 1900001 - Failed to call mmap.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public func mapReadonlyAshmem(): Unit {
        var errCode = 0i32
        unsafe { FfiRpcAshmemImplMapReadonlyAshmem(getID(), inout errCode) }
        checkAndThrow(errCode)
    }

    /**
     * Sets the protection level of the memory region to which the shared file is mapped.
     *
     * @param { UInt32 } protectionType - Protection type to set.
     * @throws { BusinessException } 1900002 - Failed to call ioctl.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public func setProtectionType(protectionType: UInt32): Unit {
        var errCode = 0i32
        unsafe { FfiRpcAshmemImplSetProtectionType(getID(), protectionType, inout errCode) }
        checkAndThrow(errCode)
    }

    /**
     * Writes data to the shared file associated with this Ashmem object.
     *
     * @param { Array<Byte> } buf - Data to write
     * @param { Int64 } size - Size of the data to write
     * @param { Int64 } offset - Start position of the data to write in the memory region associated
     *                   with this Ashmem object.
     * @throws { BusinessException } 1900003 - Failed to write data to the shared memory.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public func writeDataToAshmem(buf: Array<Byte>, size: Int64, offset: Int64): Unit {
        if (buf.size == 0) {
            throw BusinessException(ErrorCode.WriteToAshmemError.value, "Write to ashmem failed.")
        }
        unsafe {
            let cp = acquireArrayRawData(buf)
            var errCode = 0i32
            FfiRpcAshmemImplWriteDataToAshmem(getID(), cp.pointer, size, offset, inout errCode)
            releaseArrayRawData(cp)
            checkAndThrow(errCode)
        }
    }

    /**
     * Reads data from the shared file associated with this Ashmem object.
     *
     * @param { Int64 } size - Size of the data to read.
     * @param { Int64 } offset - Start position of the data to read in the memory region associated
     *                   with this Ashmem object.
     * @returns { Array<Byte> } Data read.
     * @throws { BusinessException } 1900004 - Failed to read data from the shared memory.
     */
    @!APILevel[
        22,
        syscap: "SystemCapability.Communication.IPC.Core"
    ]
    public func readDataFromAshmem(size: Int64, offset: Int64): Array<Byte> {
        unsafe {
            var errCode: Int32 = 0
            let data = FfiRpcAshmemImplReadDataFromAshmem(getID(), size, offset, inout errCode)
            checkAndThrow(errCode)
            let arr = Array<Byte>(size, repeat: 0)
            let arrPtr = acquireArrayRawData(arr)
            memcpy_s(arrPtr.pointer, UIntNative(size), data, UIntNative(size))
            releaseArrayRawData(arrPtr)
            LibC.free(data)
            return arr
        }
    }
}
